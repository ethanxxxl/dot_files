#+TITLE: Ethans GNU Emacs Config
#+AUTHOR: Ethan Smith
#+DESCRIPTION: Ethan's personal Emacs config.
#+STARTUP: Overview

* Package Manager (elpaca)
  I just copied this from the elpaca repository
  #+begin_src elisp
    (defvar elpaca-installer-version 0.7)
    (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
    (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
    (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
    (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				  :ref nil :depth 1
				  :files (:defaults "elpaca-test.el" (:exclude "extensions"))
				  :build (:not elpaca--activate-package)))
    (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	   (build (expand-file-name "elpaca/" elpaca-builds-directory))
	   (order (cdr elpaca-order))
	   (default-directory repo))
      (add-to-list 'load-path (if (file-exists-p build) build repo))
      (unless (file-exists-p repo)
	(make-directory repo t)
	(when (< emacs-major-version 28) (require 'subr-x))
	(condition-case-unless-debug err
	    (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		     ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
						     ,@(when-let ((depth (plist-get order :depth)))
							 (list (format "--depth=%d" depth) "--no-single-branch"))
						     ,(plist-get order :repo) ,repo))))
		     ((zerop (call-process "git" nil buffer t "checkout"
					   (or (plist-get order :ref) "--"))))
		     (emacs (concat invocation-directory invocation-name))
		     ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					   "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		     ((require 'elpaca))
		     ((elpaca-generate-autoloads "elpaca" repo)))
		(progn (message "%s" (buffer-string)) (kill-buffer buffer))
	      (error "%s" (with-current-buffer buffer (buffer-string))))
	  ((error) (warn "%s" err) (delete-directory repo 'recursive))))
      (unless (require 'elpaca-autoloads nil t)
	(require 'elpaca)
	(elpaca-generate-autoloads "elpaca" repo)
	(load "./elpaca-autoloads")))
    (add-hook 'after-init-hook #'elpaca-process-queues)
    (elpaca `(,@elpaca-order))
  #+end_src

  #+begin_src elisp
    (when (equal system-type 'windows-nt)
      (elpaca-no-symlink-mode))

  #+end_src
  

  *ENABLE USE-PACKAGE SUPPORT FOR ELPACA*
  #+begin_src elisp
    ;; Install use-package support
    (elpaca elpaca-use-package
      ;; Enable :elpaca use-package keyword.
      (elpaca-use-package-mode)
      (setq elpaca-use-package-by-default t))

    (setq use-package-always-ensure t)

    ;; Block until current queue processed.
    (elpaca-wait)

    ;;When installing a package which modifies a form used at the top-level
    ;;(e.g. a package which adds a use-package key word),
    ;;use `elpaca-wait' to block until that package has been installed/configured.
    ;;For example:
    ;;(use-package general :demand t)
    ;;(elpaca-wait)

    ;;Turns off elpaca-use-package-mode current declaration
    ;;Note this will cause the declaration to be interpreted immediately (not deferred).
    ;;Useful for configuring built-in emacs features.
    ;(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))

  #+end_src

* Misc Packages
** doom-modeline
   #+begin_src elisp
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1))

     (setq doom-modeline-icon t)
     (setq doom-modeline-enable-word-count t)
     (setq doom-modeline-buffer-encoding t)
     (setq doom-modeline-indent-info t)
     (setq doom-modeline-total-line-number t)
     (setq doom-modeline-lsp t)
   #+end_src
    
** doom-themes
    #+begin_src elisp
      (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	      doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-dark+ t)

	;; Enable flashing mode-line on errors
	(doom-themes-visual-bell-config)
	;; Enable custom neotree theme (all-the-icons must be installed!)
	;; (doom-themes-neotree-config)
	;; or for treemacs users
	(setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
	(doom-themes-treemacs-config)
	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config))
    #+end_src
** lsp-mode 
   #+begin_src elisp
     (use-package lsp-mode
       :ensure t
       :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
              (c-mode . lsp)
              (rust-mode . lsp)
              ;;nn if you want which-key integration
              (lsp-mode . lsp-enable-which-key-integration))
       :commands lsp
       :init
       ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
       (setq lsp-keymap-prefix "C-c l")

       ;; personal LSP preferences.
       (setq gc-cons-threshold 160000000
             read-process-output-max (* 1024 1024)  ;; 1mb

             lsp-headerline-breadcrumb-enable t
             lsp-headerline-breadcrumb-enable-symbol-numbers nil
             lsp-headerline-breadcrumb-icons-enable t
             lsp-on-type-formatting nil))

     ;; optionally
     (use-package lsp-ui
       :ensure t
       :commands lsp-ui-mode
       :init
       (setq lsp-ui-doc-delay 0.25
             lsp-ui-doc-show-with-cursor t
             lsp-ui-doc-show-with-mouse nil
             lsp-ui-sideline-show-code-actions t
             lsp-ui-sideline-show-hover nil
             lsp-ui-sideline-show-diagnostics t
             lsp-ui-doc-enable t
             lsp-ui-doc-use-webkit nil
             lsp-ui-doc-glance t))

     ;; if you are helm user
     ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
     ;; if you are ivy user
     ;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
     (use-package lsp-treemacs :ensure t :commands lsp-treemacs-errors-list)

     ;; optionally if you want to use debugger
     ;;(use-package dap-mode)
     ;; (use-package dap-LANGUAGE) ;; to load the dap adapter for your language
     (use-package dap-mode :ensure t)

     ;;(add-hook 'lsp-mode-hook 'lsp-headerline-breadcrumb-mode)
    #+end_src

   #+begin_src elisp
     (use-package lsp-grammarly
       :ensure t)
   #+end_src
   
** magit
   #+begin_src elisp
     (use-package magit
       :ensure t)
   #+end_src

   transient seems to require the built-in seq.  this generates a warning on startup.
   see [[https://github.com/progfolio/elpaca/issues/216][this]] link for details as to what is going on here.
   
   #+begin_src elisp
     (defun +elpaca-unload-seq (e)
       (and (featurep 'seq) (unload-feature 'seq t))
       (elpaca--continue-build e))

     ;; You could embed this code directly in the reicpe, I just abstracted it into a function.
     (defun +elpaca-seq-build-steps ()
       (append (butlast (if (file-exists-p (expand-file-name "seq" elpaca-builds-directory))
			    elpaca--pre-built-steps elpaca-build-steps))
	       (list '+elpaca-unload-seq 'elpaca--activate-package)))

     (use-package seq :elpaca `(seq :build ,(+elpaca-seq-build-steps)))
   #+end_src

   
   #+begin_src elisp
     (use-package transient
       :ensure t)
   #+end_src

   #+RESULTS:
   
** nerd-icons
   #+begin_src elisp
     (use-package nerd-icons
       :ensure t)

     (use-package all-the-icons
       :ensure t)

     (use-package treemacs-all-the-icons
       :ensure t)
   #+end_src
** treemacs
   #+begin_src elisp
     (use-package treemacs
       :ensure t
       :defer t)
   #+end_src
   

* Programming Stuff
** comment-tags
   #+begin_src elisp
     (use-package comment-tags
       :ensure t
       :config
       (setf comment-tags-case-sensitive t)
       (setf comment-tags-require-colon nil)
       :hook
       (prog-mode . comment-tags-mode)
       (c-mode    . comment-tags-mode))
   #+end_src
** indent-bars
    There is an optional stipple mode that can provide potentially better looking indent bars, if your particular build of emacs supports it. I have it disabled for now. This package also uses emacs treesit to determine where the indentations should go. however, *you need to install the language grammar for any language you want to support with this* use ~treesit-install-language-grammar~
 #+begin_src elisp
   (use-package indent-bars
     :ensure (:host github :repo "jdtsmith/indent-bars")
:hook
    (prog-mode . indent-bars-mode)
    :config
    (require 'indent-bars-ts)
    (indent-bars-no-descend-lists t)
    (indent-bars-treesit-support t)
   
     (setf indent-bars-prefer-character t
           indent-bars-no-stipple-char ?â”‚
           indent-bars-treesit-support t
           indent-bars-treesit-ignore-wrap t
           indent-bars-treesit-ignore-blank-lines-types t
           indent-bars-no-descent-string t)
     :custom
     (indent-bars-treesit-support t)
     (indent-bars-treesit-wrap '((c argument_list
                                    parameter_list
                                    init_declarator)
                                 (python argument_list
                                         parameters
                                         list
                                         list_comprehension
                                         dictionary
                                         dictionary_comprehension
                                         parenthesized_expression
                                         subscript))))
 #+end_src

 #+results:
** imenu-list
   Show function/structs, etc in a separate buffer for easy navigation in larger
   files.

   #+begin_src elisp
     (use-package imenu-list
      :ensure (:host github :repo "bmag/imenu-list")
      :config
      (global-set-key (kbd "C-c i") #'imenu-list-smart-toggle)
      (setf imenu-list-focus-after-activation t))
   #+end_src
** rust-mode
   #+begin_src elisp
     (use-package rust-mode
       :ensure t
       :hook (rust-mode . #'prettify-symbols-mode))
   #+end_src
** lua-mode
   #+begin_src elisp
     (use-package lua-mode
       :ensure (:host github :repo "immerrr/lua-mode")
       :custom
       (lua-indent-level 4))
   #+end_src
** sly
   #+begin_src elisp
     (use-package sly
       :ensure (:host github :repo "joaotavora/sly"))
   #+end_src

** smartparens
   #+begin_src elisp
     (use-package smartparens
       :init (smartparens-global-mode)
       :hook (prog-mode text-mode markdown-mode)
       :config
       (require 'smartparens-config))
   #+end_src
   
* Completion/Ergonomics
** company
   #+begin_src elisp
     (use-package company
       :ensure t
       :hook (after-init-hook . global-company-mode))
   #+end_src

** consult
   #+begin_src elisp
     (use-package consult)
   #+end_src

** DISABLED helm 
   I like helm, it provides pretty completion, but it is sort of awkward.  There
   is a bit of learning curve with file searching.  It also doesn't play well
   with consult.  For these reasons, I have ditched it in favor of ~vertico~

   #+begin_src 
     (use-package ac-helm
       :init (helm-mode 1)
       :ensure t
       :config 
       (setf helm-window-prefer-horizontal-split t) 
       (global-set-key (kbd "M-x") 'helm-M-x)
       (global-set-key (kbd "C-x C-f") 'helm-find-files)
       (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
       (global-set-key (kbd "M-g i") 'helm-imenu)
       (setf helm-display-header-line nil)
       (set-face-attribute 'helm-source-header nil :height 0.9)
       (helm-autoresize-mode 1)
       (setf helm-split-window-in-side-p t)
       (setf helm-always-two-windows t))
    #+end_src

   #+RESULTS:
   
** vertico
   this is an alternative to helm.  It provides completion in various contexts.
   I believe it is more lightweight as well.

   Importantly, it plays nice with consult.  I like consult, mostly for
   ~consult-theme~, so I am using this for my completion needs now.

   vertico also presents completions options in a variety of ways, such as in
   buffers, or in a grid layout.
   #+begin_src elisp
     (use-package vertico
       :ensure t
       :init (vertico-mode)
       :config
       ;; Enable vertico-multiform
       (vertico-multiform-mode)

       ;; Configure the display per command.
       ;; Use a buffer with indices for imenu
       ;; and a flat (Ido-like) menu for M-x.
       (setq vertico-multiform-commands
             '((consult-imenu buffer indexed)
               (consult-buffer buffer indexed)
               (consult-outline buffer indexed)
               (execute-extended-command grid)))

       ;; Configure the display per completion category.
       ;; Use the grid display for files and a buffer
       ;; for the consult-grep commands.
       (setq vertico-multiform-categories
             '((file grid)
               (consult-grep buffer))))
   #+end_src

   
** hotfuzz
   adds fuzzy completion to 

   #+begin_src elisp
     (use-package hotfuzz
       :ensure t)

     (setq completion-styles '(hotfuzz))
   #+end_src
   
** which-key
   #+begin_src elisp
     (use-package which-key
       :init (which-key-mode 1)
       :config
       (setq which-key-side-window-location 'bottom
	     which-key-sort-order #'which-key-key-order-alpha
	     which-key-add-column-padding 1
	     which-key-max-display-columns nil
	     which-key-min-display-lines 6
	     which-key-side-window-slot -10
	     which-key-window-max-height 0.25
	     which-key-idle-delay 0.4
	     which-key-max-description-length 25
	     which-key-allow-imprecise-window-fit t
	     which-key-separator "  " ))
    #+end_src
    
* Major Modes
** general
  #+begin_src elisp
    (global-display-line-numbers-mode 1)
    (global-visual-line-mode t)

    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (fringe-mode 0)
    (window-divider-mode t)

    (global-display-fill-column-indicator-mode t)
    (set-fill-column 80)

    (tab-bar-mode t)

    (menu-bar--display-line-numbers-mode-relative)
    (indent-tabs-mode nil)

    (setq make-backup-files nil)
    (recentf-mode)

    ;; allow window navigation with SHIFT+arrow
    (windmove-default-keybindings)
   #+end_src


   There are some general options that can only be applied via hooks for each
   buffer. The following section sets these options for the base-derived
   modes. (except ~special-mode~)
   #+begin_src elisp
     (defun es/buffer-opts ()
       (set-fill-column 80)
       (indent-tabs-mode -1)
       (indent-bars-reset) ; not sure why but this is sort of necessary.
       )

     (add-hook 'prog-mode-hook #'es/buffer-opts)
     (add-hook 'text-mode-hook #'es/buffer-opts)
   #+end_src

   enable ANSI colors in comint buffers
   #+begin_src elisp
     (require 'ansi-color)
     (defun colorize-compilation-buffer ()
       (ansi-color-apply-on-region compilation-filter-start (point)))
     (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)
   #+end_src

** org-mode
   #+begin_src elisp
     (setf org-adapt-indentation t)

     (use-package org-bullets
       :init (add-hook 'org-mode-hook 'org-bullets-mode))

     (defun es/org-mode ()
       (when (equal (buffer-name) "config.org")
         (lsp-disconnect)
         (lsp-mode -1))
       (indent-bars-mode -1))

     (add-hook 'org-mode-hook 'es/org-mode)
   #+end_src

   Org mode seems to have a bug/limiting factor that prevents multiline emphasis from displaying.
   that is, the following paragraph should be entirely italic:

   /Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
   tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
   quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodop
   consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
   cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
   proident, sunt in culpa qui officia deserunt mollit anim id est laborum./

   #+begin_src elisp
     (with-eval-after-load 'org
       ;; Allow multiple line Org emphasis markup.
       ;; http://emacs.stackexchange.com/a/13828/115
       (setcar (nthcdr 4 org-emphasis-regexp-components) 20) ;Up to 20 lines, default is just 1
       ;; Below is needed to apply the modified `org-emphasis-regexp-components'
       ;; settings from above.
       (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components))
   #+end_src

   the following will enable org-babel to execute C source code in source
   blcoks.  Apparently, it is important to use a capital "C" in the source
   blocks.
   
   #+begin_src elisp
     (org-babel-do-load-languages
      'org-babel-load-languages '((C . t)))
   #+end_src
   
** prog-mode
   these are general options I want set for all programming modes

   #+begin_src elisp
     (defun es/prog-mode-opts ()
         (set-fill-column 80)
         (keymap-local-set "C-c e" #'consult-flymake)
         (keymap-local-set "C-c E" #'consult-compile-error))

     (add-hook 'prog-mode-hook #'es/prog-mode-opts)
   #+end_src
   
** text-mode
   #+begin_src elisp
     (defun es/text-mode ()
       (unless (equal (buffer-name) "config.org")
	 (require 'lsp-grammarly)
	 (lsp)))

     (add-hook 'text-mode-hook 'es/text-mode)
   #+end_src

** c-mode
   this is a function to create a centered comment header.

   #+begin_src elisp
     (defun es/center-comment ()
       (interactive)
       ;; 1. detect the comment style, either /* or //
       ;; 2. get the comment text
       ;; 3. get comment length
       ;; 4. insert centered comment

       (beginning-of-line)
       (skip-chars-forward "[:blank:]")

       (let ((indent (current-column))
             (comment-type (cond ((search-forward "//" (line-end-position) t) 'line)
                                 ((search-forward "/*" (line-end-position) t) 'block)))
             (heading (string-clean-whitespace
                       (buffer-substring (point) (line-end-position))))
             fill-char
             beg-str
             end-str
             fill-len)

         (cond ((eq comment-type 'line)
                (setf fill-char ?/
                      beg-str "//"
                      end-str ""))
               ((eq comment-type 'block)
                (setf fill-char ?*
                      beg-str "/*"
                      end-str "*/")
                (if (equal "*/" (substring heading
                                           (- (length heading) 2)
                                           (length heading)))
                    (setf heading (string-clean-whitespace
                                   (substring heading 0 (- (length heading) 2)))))))

         (setf heading (concat " " heading " ")
               fill-len (- fill-column
                           indent
                           (length heading)))

         ;; comment-type is nil when there is no comment at (point)
         (when (and comment-type (< 0 fill-len))
           (delete-line)

           (let ((fill-l (- (/ fill-len 2) (length beg-str)))
                 (fill-r (- (ceiling (/ fill-len 2.0)) (length end-str))))

             (mapcar #'insert
                     (list (make-string indent #x20)
                           beg-str
                           (make-string fill-l fill-char) 
                           heading
                           (make-string fill-r fill-char)
                           end-str
                           "\n"))))))
   #+end_src

      #+begin_src elisp
        (defun ethan-c-settings ()
          (setf c-basic-offset 4)
          (indent-bars-reset))

        (add-hook 'c-mode-hook #'ethan-c-settings)
        (define-key c-mode-map (kbd "C-c c") #'es/center-comment)
   #+end_src

** lisp-mode
   #+begin_src elisp
     (keymap-global-set "C->" 'sp-slurp-hybrid-sexp)
     (keymap-global-set "C-<" 'sp-forward-barf-sexp)

     (defun ethan-sly-keybinds ()
       (interactive)
       (keymap-set sly-mrepl-mode-map "C-M-p" 'sly-mrepl-previous-prompt)
       (keymap-set sly-mrepl-mode-map "C-M-n" 'sly-mrepl-next-prompt))

     (defun es/lisp-config ()
       (interactive)
       (keymap-set lisp-mode-map "C-k" 'sp-kill-hybrid-sexp)
       (indent-bars-mode -1))

     (add-hook 'sly-mrepl-mode-hook #'ethan-sly-keybinds)
     (add-hook 'lisp-mode-hook #'es/lisp-config)
   #+end_src

* General Keybindings
  These are keybindings which I use everywhere all the time.
  #+begin_src elisp
    (defun ethan-open-config ()
      (interactive)

      (find-file (let ((emacs-dir "~/.emacs.d/config.org")
		       (config-dir "~/.config/emacs/config.org")
		       (dir nil))

		   (if (file-exists-p emacs-dir)
		       (setf dir emacs-dir))

		   (if (file-exists-p config-dir)
		       (setf dir config-dir))

		   dir)))

    (keymap-global-set "C-c p" 'ethan-open-config)
    (keymap-global-set "C-c t" 'treemacs)
    ;; (keymap-global-set "C-c b" )

    (require 'misc)

    (defun es-swap-window (&optional current-window)
      (interactive)
      (let* ((win (or current-window
		      (window-child (window-parent (selected-window)))))
	     (buf (window-buffer win))
	     (next-win (window-next-sibling win))
	     (next-buf (window-buffer next-win)))
	(when next-win
	  (set-window-buffer win next-buf)
	  (set-window-buffer next-win buf)
	  (es-swap-window next-win))))

    (keymap-global-set "C-c w" 'es-swap-window)

    ;; make scrolling much more sensible
    (keymap-global-set "C-v" 'View-scroll-half-page-forward)
    (keymap-global-set "M-v" 'View-scroll-half-page-backward)

    ;; enable imenu easily
    (keymap-global-set "C-c i" #'consult-imenu)

    (keymap-global-set "C-x ," #'consult-recent-file)
  #+end_src

#+begin_src elisp
  (keymap-global-set "C-x b" #'consult-buffer)
#+end_src
