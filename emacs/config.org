#+TITLE: Ethans GNU Emacs Config
#+AUTHOR: Ethan Smith
#+DESCRIPTION: Ethan's personal Emacs config.
#+STARTUP: Overview

* General Keybindings
  These are keybindings which I use everywhere all the time.
  #+begin_src elisp
    (defun ethan-open-config ()
      (interactive)
      (find-file "~/.config/emacs/config.org"))
    (keymap-global-set "C-c p" 'ethan-open-config)
    (keymap-global-set "C-c t" 'treemacs)
    ;; (keymap-global-set "C-c b" )

    (require 'misc)

    (defun es-swap-window (&optional current-window)
      (interactive)
      (let* ((win (or current-window
		      (window-child (window-parent (selected-window)))))
	     (buf (window-buffer win))
	     (next-win (window-next-sibling win))
	     (next-buf (window-buffer next-win)))
	(when next-win
	  (set-window-buffer win next-buf)
	  (set-window-buffer next-win buf)
	  (es-swap-window next-win))))

    (keymap-global-set "C-c w" 'es-swap-window)

    ;; make scrolling much more sensible
    (keymap-global-set "C-v" 'View-scroll-half-page-forward)
    (keymap-global-set "M-v" 'View-scroll-half-page-backward)
  #+end_src

  

* Package Manager (elpaca)
I just copied this from the elpaca repository
#+begin_src elisp
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
#+end_src

#+RESULTS:


*ENABLE USE-PACKAGE SUPPORT FOR ELPACA*
#+begin_src elisp
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  (elpaca nil (message "deferred"))
#+end_src

#+RESULTS:

* Packages
** which-key
   #+begin_src elisp
     (use-package which-key
       :init (which-key-mode 1)
       :config
       (setq which-key-side-window-location 'bottom
	     which-key-sort-order #'which-key-key-order-alpha
	     which-key-add-column-padding 1
	     which-key-max-display-columns nil
	     which-key-min-display-lines 6
	     which-key-side-window-slot -10
	     which-key-window-max-height 0.25
	     which-key-idle-delay 0.4
	     which-key-max-description-length 25
	     which-key-allow-imprecise-window-fit t
	     which-key-separator "  " ))
    #+end_src

** doom-modeline
   #+begin_src elisp
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1))

     (setq doom-modeline-icon t)
     (setq doom-modeline-enable-word-count t)
     (setq doom-modeline-buffer-encoding t)
     (setq doom-modeline-indent-info t)
     (setq doom-modeline-total-line-number t)
     (setq doom-modeline-lsp t)
   #+end_src
    
** helm
   #+begin_src elisp
     (use-package ac-helm
       :init (helm-mode 1)
       :ensure t)

     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     (global-set-key (kbd "C-x C-b") 'helm-buffers-list)
     (global-set-key (kbd "M-g i") 'helm-imenu)
   #+end_src

   #+RESULTS:
   
** company
   #+begin_src elisp
     (use-package company
       :ensure t
       :hook (after-init-hook . global-company-mode))
   #+end_src

** consult
   #+begin_src elisp
     (use-package consult)
   #+end_src


** treemacs
   #+begin_src elisp
     (use-package treemacs
       :ensure t
       :defer t)
   #+end_src
** nerd-icons
   #+begin_src elisp
     (use-package nerd-icons
       :ensure t)

     (use-package all-the-icons
       :ensure t)

     (use-package treemacs-all-the-icons
       :ensure t)
   #+end_src
** magit
   #+begin_src elisp
     (use-package magit
       :ensure t)
   #+end_src
** TODO ibuffer
   (use-package )

** smartparens
   #+begin_src elisp
     (use-package smartparens
       :init (smartparens-global-mode)
       :hook (prog-mode text-mode markdown-mode)
       :config
       (require 'smartparens-config))
   #+end_src

** lsp-mode 
   #+begin_src elisp
     (use-package lsp-mode
       :init
       ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
       (setq lsp-keymap-prefix "C-c l")
       :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
	      (c-mode . lsp)
	      (rust-mode . lsp)
	      ;; if you want which-key integration
	      (lsp-mode . lsp-enable-which-key-integration))
       :commands lsp)

     ;; optionally
     (use-package lsp-ui :commands lsp-ui-mode)
     ;; if you are helm user
     ;;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
     ;; if you are ivy user
     ;;(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
     (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

     ;; optionally if you want to use debugger
     ;;(use-package dap-mode)
     ;; (use-package dap-LANGUAGE) ;; to load the dap adapter for your language
     (use-package dap-mode)
  #+end_src

   LSP options which make life nicer.

   #+begin_src elisp
     (setq gc-cons-threshold 160000000)
     (setq read-process-output-max (* 1024 1024)) ;; 1mb

     (setq lsp-ui-doc-delay 0.5)
     (setq lsp-ui-doc-show-with-cursor t)
     (setq lsp-ui-doc-show-with-mouse t)

     ;(add-hook 'lsp-mode-hook 'lsp-headerline-breadcrumb-mode)
     (setq lsp-headerline-breadcrumb-enable t)
     (setq lsp-headerline-breadcrumb-enable-symbol-numbers nil)
     (setq lsp-headerline-breadcrumb-icons-enable t)

     (use-package lsp-grammarly
       :ensure t
       :hook (text-mode . (lambda ()
			    (require 'lsp-grammarly)
			    (lsp))))  ; or lsp-deferred

     (setq lsp-ui-sideline-show-code-actions t)
     (setq lsp-ui-sideline-show-hover t)
     (setq lsp-ui-sideline-show-diagnostics nil)
     (setq lsp-ui-doc-enable t)
     (setq lsp-ui-doc-show-with-cursor t)
     (setq lsp-ui-doc-show-with-mouse nil)
     (setq lsp-ui-doc-delay 0.25)
     (setq lsp-ui-doc-use-webkit nil)
     (setq lsp-ui-doc-glance t)
   #+end_src
   
** sly
   #+begin_src elisp
     (use-package sly
       :ensure t
       :elpaca (:host github :repo "joaotavora/sly"))
   #+end_src

** rust-mode
   #+begin_src elisp
     (use-package rust-mode
       :ensure t
       :hook (rust-mode . #'prettify-symbols-mode))
   #+end_src

** comment-tags
   #+begin_src elisp
     (use-package comment-tags
       :ensure t
       :config
       (setf comment-tags-case-sensitive nil)
       (setf comment-tags-require-colon nil)
       :hook
       (prog-mode . comment-tags-mode)
       (c-mode    . comment-tags-mode))
   #+end_src
** doom-themes
    #+begin_src elisp
      (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	      doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-dark+ t)

	;; Enable flashing mode-line on errors
	(doom-themes-visual-bell-config)
	;; Enable custom neotree theme (all-the-icons must be installed!)
	;; (doom-themes-neotree-config)
	;; or for treemacs users
	(setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
	(doom-themes-treemacs-config)
	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config))
    #+end_src
   
* GUI Tweaks
  #+begin_src elisp
    (global-display-line-numbers-mode 1)
    (global-visual-line-mode t)

    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (fringe-mode 0)
    (window-divider-mode t)

    (set-fill-column 80)
    (global-display-fill-column-indicator-mode t)

    (tab-bar-mode t)
  #+end_src

* Major Modes
** general
   #+begin_src elisp
     (menu-bar--display-line-numbers-mode-relative)
     (indent-tabs-mode nil)
     (set-fill-column 80)
     (setq make-backup-files nil)
   #+end_src
** org-mode
   #+begin_src elisp
     (setf org-adapt-indentation t)

     (use-package org-bullets
       :init (add-hook 'org-mode-hook 'org-bullets-mode))
   #+end_src

   
** prog-mode
   these are general options I want set for all programming modes

   #+begin_src elisp
     ;(add-hook prog-mode-hook #'comment-tags-mode)
   #+end_src
** c-mode
   #+begin_src elisp
     (defun ethan-c-settings ()
       (setf c-basic-offset 4))

     (add-hook 'c-mode-hook #'ethan-c-settings)
   #+end_src
** lisp-mode
   #+begin_src elisp
     (keymap-global-set "C->" 'sp-slurp-hybrid-sexp)
     (keymap-global-set "C-<" 'sp-forward-barf-sexp)

     (defun ethan-sly-keybinds ()
       (interactive)
       (keymap-set sly-mrepl-mode-map "C-M-p" 'sly-mrepl-previous-prompt)
       (keymap-set sly-mrepl-mode-map "C-M-n" 'sly-mrepl-next-prompt))

     (defun ethan-lisp-keybinds ()
       (interactive)
       (keymap-set lisp-mode-map "C-k" 'sp-kill-hybrid-sexp))

     (add-hook 'sly-mrepl-mode-hook #'ethan-sly-keybinds)
     (add-hook 'lisp-mode-hook #'ethan-lisp-keybinds)
   #+end_src
   
